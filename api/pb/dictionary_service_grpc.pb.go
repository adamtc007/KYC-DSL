// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/dictionary_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictionaryService_CreateAttribute_FullMethodName  = "/kyc.dictionary.DictionaryService/CreateAttribute"
	DictionaryService_GetAttribute_FullMethodName     = "/kyc.dictionary.DictionaryService/GetAttribute"
	DictionaryService_SearchAttributes_FullMethodName = "/kyc.dictionary.DictionaryService/SearchAttributes"
	DictionaryService_ListAttributes_FullMethodName   = "/kyc.dictionary.DictionaryService/ListAttributes"
)

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DictionaryService manages the attribute dictionary/data model
type DictionaryServiceClient interface {
	// Create a new attribute in the dictionary
	CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	// Get a specific attribute by ID
	GetAttribute(ctx context.Context, in *DictGetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	// Search attributes by name or description
	SearchAttributes(ctx context.Context, in *SearchAttributesRequest, opts ...grpc.CallOption) (*SearchAttributesResponse, error)
	// List all attributes
	ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attribute)
	err := c.cc.Invoke(ctx, DictionaryService_CreateAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetAttribute(ctx context.Context, in *DictGetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attribute)
	err := c.cc.Invoke(ctx, DictionaryService_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) SearchAttributes(ctx context.Context, in *SearchAttributesRequest, opts ...grpc.CallOption) (*SearchAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAttributesResponse)
	err := c.cc.Invoke(ctx, DictionaryService_SearchAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttributesResponse)
	err := c.cc.Invoke(ctx, DictionaryService_ListAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations must embed UnimplementedDictionaryServiceServer
// for forward compatibility.
//
// DictionaryService manages the attribute dictionary/data model
type DictionaryServiceServer interface {
	// Create a new attribute in the dictionary
	CreateAttribute(context.Context, *CreateAttributeRequest) (*Attribute, error)
	// Get a specific attribute by ID
	GetAttribute(context.Context, *DictGetAttributeRequest) (*Attribute, error)
	// Search attributes by name or description
	SearchAttributes(context.Context, *SearchAttributesRequest) (*SearchAttributesResponse, error)
	// List all attributes
	ListAttributes(context.Context, *ListAttributesRequest) (*ListAttributesResponse, error)
	mustEmbedUnimplementedDictionaryServiceServer()
}

// UnimplementedDictionaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServiceServer struct{}

func (UnimplementedDictionaryServiceServer) CreateAttribute(context.Context, *CreateAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttribute not implemented")
}
func (UnimplementedDictionaryServiceServer) GetAttribute(context.Context, *DictGetAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedDictionaryServiceServer) SearchAttributes(context.Context, *SearchAttributesRequest) (*SearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttributes not implemented")
}
func (UnimplementedDictionaryServiceServer) ListAttributes(context.Context, *ListAttributesRequest) (*ListAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributes not implemented")
}
func (UnimplementedDictionaryServiceServer) mustEmbedUnimplementedDictionaryServiceServer() {}
func (UnimplementedDictionaryServiceServer) testEmbeddedByValue()                           {}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_CreateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).CreateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_CreateAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).CreateAttribute(ctx, req.(*CreateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictGetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetAttribute(ctx, req.(*DictGetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_SearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).SearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_SearchAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).SearchAttributes(ctx, req.(*SearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListAttributes(ctx, req.(*ListAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.dictionary.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttribute",
			Handler:    _DictionaryService_CreateAttribute_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _DictionaryService_GetAttribute_Handler,
		},
		{
			MethodName: "SearchAttributes",
			Handler:    _DictionaryService_SearchAttributes_Handler,
		},
		{
			MethodName: "ListAttributes",
			Handler:    _DictionaryService_ListAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/dictionary_service.proto",
}
