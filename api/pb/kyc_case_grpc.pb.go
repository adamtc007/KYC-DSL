// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/kyc_case.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KycCaseService_GetCase_FullMethodName         = "/kyc.KycCaseService/GetCase"
	KycCaseService_UpdateCase_FullMethodName      = "/kyc.KycCaseService/UpdateCase"
	KycCaseService_ListCases_FullMethodName       = "/kyc.KycCaseService/ListCases"
	KycCaseService_CreateCase_FullMethodName      = "/kyc.KycCaseService/CreateCase"
	KycCaseService_DeleteCase_FullMethodName      = "/kyc.KycCaseService/DeleteCase"
	KycCaseService_GetCaseVersions_FullMethodName = "/kyc.KycCaseService/GetCaseVersions"
)

// KycCaseServiceClient is the client API for KycCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KycCaseService provides operations for managing KYC cases
type KycCaseServiceClient interface {
	// GetCase retrieves a single KYC case by ID
	GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*KycCase, error)
	// UpdateCase applies updates to an existing case
	UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*KycCase, error)
	// ListCases streams all available KYC cases
	ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KycCase], error)
	// CreateCase creates a new KYC case from DSL
	CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*KycCase, error)
	// DeleteCase removes a KYC case
	DeleteCase(ctx context.Context, in *DeleteCaseRequest, opts ...grpc.CallOption) (*DeleteCaseResponse, error)
	// GetCaseVersions retrieves all versions of a case
	GetCaseVersions(ctx context.Context, in *GetCaseVersionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KycCaseVersion], error)
}

type kycCaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKycCaseServiceClient(cc grpc.ClientConnInterface) KycCaseServiceClient {
	return &kycCaseServiceClient{cc}
}

func (c *kycCaseServiceClient) GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*KycCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KycCase)
	err := c.cc.Invoke(ctx, KycCaseService_GetCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycCaseServiceClient) UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*KycCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KycCase)
	err := c.cc.Invoke(ctx, KycCaseService_UpdateCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycCaseServiceClient) ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KycCase], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KycCaseService_ServiceDesc.Streams[0], KycCaseService_ListCases_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListCasesRequest, KycCase]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KycCaseService_ListCasesClient = grpc.ServerStreamingClient[KycCase]

func (c *kycCaseServiceClient) CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*KycCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KycCase)
	err := c.cc.Invoke(ctx, KycCaseService_CreateCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycCaseServiceClient) DeleteCase(ctx context.Context, in *DeleteCaseRequest, opts ...grpc.CallOption) (*DeleteCaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCaseResponse)
	err := c.cc.Invoke(ctx, KycCaseService_DeleteCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycCaseServiceClient) GetCaseVersions(ctx context.Context, in *GetCaseVersionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KycCaseVersion], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KycCaseService_ServiceDesc.Streams[1], KycCaseService_GetCaseVersions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCaseVersionsRequest, KycCaseVersion]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KycCaseService_GetCaseVersionsClient = grpc.ServerStreamingClient[KycCaseVersion]

// KycCaseServiceServer is the server API for KycCaseService service.
// All implementations must embed UnimplementedKycCaseServiceServer
// for forward compatibility.
//
// KycCaseService provides operations for managing KYC cases
type KycCaseServiceServer interface {
	// GetCase retrieves a single KYC case by ID
	GetCase(context.Context, *GetCaseRequest) (*KycCase, error)
	// UpdateCase applies updates to an existing case
	UpdateCase(context.Context, *UpdateCaseRequest) (*KycCase, error)
	// ListCases streams all available KYC cases
	ListCases(*ListCasesRequest, grpc.ServerStreamingServer[KycCase]) error
	// CreateCase creates a new KYC case from DSL
	CreateCase(context.Context, *CreateCaseRequest) (*KycCase, error)
	// DeleteCase removes a KYC case
	DeleteCase(context.Context, *DeleteCaseRequest) (*DeleteCaseResponse, error)
	// GetCaseVersions retrieves all versions of a case
	GetCaseVersions(*GetCaseVersionsRequest, grpc.ServerStreamingServer[KycCaseVersion]) error
	mustEmbedUnimplementedKycCaseServiceServer()
}

// UnimplementedKycCaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKycCaseServiceServer struct{}

func (UnimplementedKycCaseServiceServer) GetCase(context.Context, *GetCaseRequest) (*KycCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCase not implemented")
}
func (UnimplementedKycCaseServiceServer) UpdateCase(context.Context, *UpdateCaseRequest) (*KycCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCase not implemented")
}
func (UnimplementedKycCaseServiceServer) ListCases(*ListCasesRequest, grpc.ServerStreamingServer[KycCase]) error {
	return status.Errorf(codes.Unimplemented, "method ListCases not implemented")
}
func (UnimplementedKycCaseServiceServer) CreateCase(context.Context, *CreateCaseRequest) (*KycCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCase not implemented")
}
func (UnimplementedKycCaseServiceServer) DeleteCase(context.Context, *DeleteCaseRequest) (*DeleteCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCase not implemented")
}
func (UnimplementedKycCaseServiceServer) GetCaseVersions(*GetCaseVersionsRequest, grpc.ServerStreamingServer[KycCaseVersion]) error {
	return status.Errorf(codes.Unimplemented, "method GetCaseVersions not implemented")
}
func (UnimplementedKycCaseServiceServer) mustEmbedUnimplementedKycCaseServiceServer() {}
func (UnimplementedKycCaseServiceServer) testEmbeddedByValue()                        {}

// UnsafeKycCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KycCaseServiceServer will
// result in compilation errors.
type UnsafeKycCaseServiceServer interface {
	mustEmbedUnimplementedKycCaseServiceServer()
}

func RegisterKycCaseServiceServer(s grpc.ServiceRegistrar, srv KycCaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedKycCaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KycCaseService_ServiceDesc, srv)
}

func _KycCaseService_GetCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycCaseServiceServer).GetCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KycCaseService_GetCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycCaseServiceServer).GetCase(ctx, req.(*GetCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycCaseService_UpdateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycCaseServiceServer).UpdateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KycCaseService_UpdateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycCaseServiceServer).UpdateCase(ctx, req.(*UpdateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycCaseService_ListCases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KycCaseServiceServer).ListCases(m, &grpc.GenericServerStream[ListCasesRequest, KycCase]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KycCaseService_ListCasesServer = grpc.ServerStreamingServer[KycCase]

func _KycCaseService_CreateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycCaseServiceServer).CreateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KycCaseService_CreateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycCaseServiceServer).CreateCase(ctx, req.(*CreateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycCaseService_DeleteCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycCaseServiceServer).DeleteCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KycCaseService_DeleteCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycCaseServiceServer).DeleteCase(ctx, req.(*DeleteCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycCaseService_GetCaseVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCaseVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KycCaseServiceServer).GetCaseVersions(m, &grpc.GenericServerStream[GetCaseVersionsRequest, KycCaseVersion]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KycCaseService_GetCaseVersionsServer = grpc.ServerStreamingServer[KycCaseVersion]

// KycCaseService_ServiceDesc is the grpc.ServiceDesc for KycCaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KycCaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.KycCaseService",
	HandlerType: (*KycCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCase",
			Handler:    _KycCaseService_GetCase_Handler,
		},
		{
			MethodName: "UpdateCase",
			Handler:    _KycCaseService_UpdateCase_Handler,
		},
		{
			MethodName: "CreateCase",
			Handler:    _KycCaseService_CreateCase_Handler,
		},
		{
			MethodName: "DeleteCase",
			Handler:    _KycCaseService_DeleteCase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCases",
			Handler:       _KycCaseService_ListCases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCaseVersions",
			Handler:       _KycCaseService_GetCaseVersions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/kyc_case.proto",
}
