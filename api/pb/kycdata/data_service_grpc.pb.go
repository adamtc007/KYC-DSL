// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto_shared/data_service.proto

package kycdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictionaryService_GetAttribute_FullMethodName   = "/kyc.data.DictionaryService/GetAttribute"
	DictionaryService_ListAttributes_FullMethodName = "/kyc.data.DictionaryService/ListAttributes"
	DictionaryService_GetDocument_FullMethodName    = "/kyc.data.DictionaryService/GetDocument"
	DictionaryService_ListDocuments_FullMethodName  = "/kyc.data.DictionaryService/ListDocuments"
)

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ----------------------
// Dictionary Service
// ----------------------
type DictionaryServiceClient interface {
	GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*AttributeList, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*DocumentList, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attribute)
	err := c.cc.Invoke(ctx, DictionaryService_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*AttributeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeList)
	err := c.cc.Invoke(ctx, DictionaryService_ListAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, DictionaryService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*DocumentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentList)
	err := c.cc.Invoke(ctx, DictionaryService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations must embed UnimplementedDictionaryServiceServer
// for forward compatibility.
//
// ----------------------
// Dictionary Service
// ----------------------
type DictionaryServiceServer interface {
	GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error)
	ListAttributes(context.Context, *ListAttributesRequest) (*AttributeList, error)
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*DocumentList, error)
	mustEmbedUnimplementedDictionaryServiceServer()
}

// UnimplementedDictionaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServiceServer struct{}

func (UnimplementedDictionaryServiceServer) GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedDictionaryServiceServer) ListAttributes(context.Context, *ListAttributesRequest) (*AttributeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributes not implemented")
}
func (UnimplementedDictionaryServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDictionaryServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*DocumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDictionaryServiceServer) mustEmbedUnimplementedDictionaryServiceServer() {}
func (UnimplementedDictionaryServiceServer) testEmbeddedByValue()                           {}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetAttribute(ctx, req.(*GetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListAttributes(ctx, req.(*ListAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.data.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttribute",
			Handler:    _DictionaryService_GetAttribute_Handler,
		},
		{
			MethodName: "ListAttributes",
			Handler:    _DictionaryService_ListAttributes_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DictionaryService_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DictionaryService_ListDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_shared/data_service.proto",
}

const (
	CaseService_SaveCaseVersion_FullMethodName  = "/kyc.data.CaseService/SaveCaseVersion"
	CaseService_GetCaseVersion_FullMethodName   = "/kyc.data.CaseService/GetCaseVersion"
	CaseService_ListCaseVersions_FullMethodName = "/kyc.data.CaseService/ListCaseVersions"
)

// CaseServiceClient is the client API for CaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ----------------------
// Case Service
// ----------------------
type CaseServiceClient interface {
	SaveCaseVersion(ctx context.Context, in *CaseVersionRequest, opts ...grpc.CallOption) (*CaseVersionResponse, error)
	GetCaseVersion(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*CaseVersion, error)
	ListCaseVersions(ctx context.Context, in *ListCaseVersionsRequest, opts ...grpc.CallOption) (*CaseVersionList, error)
}

type caseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseServiceClient(cc grpc.ClientConnInterface) CaseServiceClient {
	return &caseServiceClient{cc}
}

func (c *caseServiceClient) SaveCaseVersion(ctx context.Context, in *CaseVersionRequest, opts ...grpc.CallOption) (*CaseVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaseVersionResponse)
	err := c.cc.Invoke(ctx, CaseService_SaveCaseVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) GetCaseVersion(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*CaseVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaseVersion)
	err := c.cc.Invoke(ctx, CaseService_GetCaseVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) ListCaseVersions(ctx context.Context, in *ListCaseVersionsRequest, opts ...grpc.CallOption) (*CaseVersionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaseVersionList)
	err := c.cc.Invoke(ctx, CaseService_ListCaseVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseServiceServer is the server API for CaseService service.
// All implementations must embed UnimplementedCaseServiceServer
// for forward compatibility.
//
// ----------------------
// Case Service
// ----------------------
type CaseServiceServer interface {
	SaveCaseVersion(context.Context, *CaseVersionRequest) (*CaseVersionResponse, error)
	GetCaseVersion(context.Context, *GetCaseRequest) (*CaseVersion, error)
	ListCaseVersions(context.Context, *ListCaseVersionsRequest) (*CaseVersionList, error)
	mustEmbedUnimplementedCaseServiceServer()
}

// UnimplementedCaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaseServiceServer struct{}

func (UnimplementedCaseServiceServer) SaveCaseVersion(context.Context, *CaseVersionRequest) (*CaseVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCaseVersion not implemented")
}
func (UnimplementedCaseServiceServer) GetCaseVersion(context.Context, *GetCaseRequest) (*CaseVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaseVersion not implemented")
}
func (UnimplementedCaseServiceServer) ListCaseVersions(context.Context, *ListCaseVersionsRequest) (*CaseVersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCaseVersions not implemented")
}
func (UnimplementedCaseServiceServer) mustEmbedUnimplementedCaseServiceServer() {}
func (UnimplementedCaseServiceServer) testEmbeddedByValue()                     {}

// UnsafeCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseServiceServer will
// result in compilation errors.
type UnsafeCaseServiceServer interface {
	mustEmbedUnimplementedCaseServiceServer()
}

func RegisterCaseServiceServer(s grpc.ServiceRegistrar, srv CaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaseService_ServiceDesc, srv)
}

func _CaseService_SaveCaseVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).SaveCaseVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_SaveCaseVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).SaveCaseVersion(ctx, req.(*CaseVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_GetCaseVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).GetCaseVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_GetCaseVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).GetCaseVersion(ctx, req.(*GetCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_ListCaseVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCaseVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).ListCaseVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_ListCaseVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).ListCaseVersions(ctx, req.(*ListCaseVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseService_ServiceDesc is the grpc.ServiceDesc for CaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.data.CaseService",
	HandlerType: (*CaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveCaseVersion",
			Handler:    _CaseService_SaveCaseVersion_Handler,
		},
		{
			MethodName: "GetCaseVersion",
			Handler:    _CaseService_GetCaseVersion_Handler,
		},
		{
			MethodName: "ListCaseVersions",
			Handler:    _CaseService_ListCaseVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_shared/data_service.proto",
}
