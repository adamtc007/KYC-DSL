// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto_shared/ontology_service.proto

package kycontology

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OntologyService_GetEntity_FullMethodName             = "/kyc.ontology.OntologyService/GetEntity"
	OntologyService_ListEntities_FullMethodName          = "/kyc.ontology.OntologyService/ListEntities"
	OntologyService_CreateEntity_FullMethodName          = "/kyc.ontology.OntologyService/CreateEntity"
	OntologyService_UpdateEntity_FullMethodName          = "/kyc.ontology.OntologyService/UpdateEntity"
	OntologyService_SearchEntities_FullMethodName        = "/kyc.ontology.OntologyService/SearchEntities"
	OntologyService_GetCbu_FullMethodName                = "/kyc.ontology.OntologyService/GetCbu"
	OntologyService_ListCbus_FullMethodName              = "/kyc.ontology.OntologyService/ListCbus"
	OntologyService_CreateCbu_FullMethodName             = "/kyc.ontology.OntologyService/CreateCbu"
	OntologyService_GetCbuRoles_FullMethodName           = "/kyc.ontology.OntologyService/GetCbuRoles"
	OntologyService_AssignCbuRole_FullMethodName         = "/kyc.ontology.OntologyService/AssignCbuRole"
	OntologyService_GetAttribute_FullMethodName          = "/kyc.ontology.OntologyService/GetAttribute"
	OntologyService_ListAttributes_FullMethodName        = "/kyc.ontology.OntologyService/ListAttributes"
	OntologyService_SearchAttributes_FullMethodName      = "/kyc.ontology.OntologyService/SearchAttributes"
	OntologyService_GetConcept_FullMethodName            = "/kyc.ontology.OntologyService/GetConcept"
	OntologyService_ListConcepts_FullMethodName          = "/kyc.ontology.OntologyService/ListConcepts"
	OntologyService_SearchConcepts_FullMethodName        = "/kyc.ontology.OntologyService/SearchConcepts"
	OntologyService_GetRegulation_FullMethodName         = "/kyc.ontology.OntologyService/GetRegulation"
	OntologyService_ListRegulations_FullMethodName       = "/kyc.ontology.OntologyService/ListRegulations"
	OntologyService_GetDocument_FullMethodName           = "/kyc.ontology.OntologyService/GetDocument"
	OntologyService_ListDocuments_FullMethodName         = "/kyc.ontology.OntologyService/ListDocuments"
	OntologyService_GetEntityControlGraph_FullMethodName = "/kyc.ontology.OntologyService/GetEntityControlGraph"
	OntologyService_CreateControl_FullMethodName         = "/kyc.ontology.OntologyService/CreateControl"
	OntologyService_GetControlChain_FullMethodName       = "/kyc.ontology.OntologyService/GetControlChain"
	OntologyService_GetKycProfile_FullMethodName         = "/kyc.ontology.OntologyService/GetKycProfile"
	OntologyService_UpdateKycProfile_FullMethodName      = "/kyc.ontology.OntologyService/UpdateKycProfile"
)

// OntologyServiceClient is the client API for OntologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============================================================================
// OntologyService: Unified service for entities, CBUs, dictionary, and graphs
// ============================================================================
type OntologyServiceClient interface {
	// Entity operations
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*EntityList, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	SearchEntities(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*EntityList, error)
	// CBU operations
	GetCbu(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*Cbu, error)
	ListCbus(ctx context.Context, in *ListCbusRequest, opts ...grpc.CallOption) (*CbuList, error)
	CreateCbu(ctx context.Context, in *CreateCbuRequest, opts ...grpc.CallOption) (*CbuResponse, error)
	GetCbuRoles(ctx context.Context, in *GetCbuRolesRequest, opts ...grpc.CallOption) (*CbuRoleList, error)
	AssignCbuRole(ctx context.Context, in *AssignCbuRoleRequest, opts ...grpc.CallOption) (*CbuRoleResponse, error)
	// Attribute operations
	GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*AttributeList, error)
	SearchAttributes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*AttributeList, error)
	// Concept operations
	GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*Concept, error)
	ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*ConceptList, error)
	SearchConcepts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConceptList, error)
	// Regulation & Document operations
	GetRegulation(ctx context.Context, in *GetRegulationRequest, opts ...grpc.CallOption) (*Regulation, error)
	ListRegulations(ctx context.Context, in *ListRegulationsRequest, opts ...grpc.CallOption) (*RegulationList, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*DocumentList, error)
	// Control graph operations
	GetEntityControlGraph(ctx context.Context, in *GetEntityControlRequest, opts ...grpc.CallOption) (*EntityControlGraph, error)
	CreateControl(ctx context.Context, in *CreateControlRequest, opts ...grpc.CallOption) (*ControlResponse, error)
	GetControlChain(ctx context.Context, in *GetControlChainRequest, opts ...grpc.CallOption) (*ControlChain, error)
	// KYC Profile operations
	GetKycProfile(ctx context.Context, in *GetKycProfileRequest, opts ...grpc.CallOption) (*KycProfile, error)
	UpdateKycProfile(ctx context.Context, in *UpdateKycProfileRequest, opts ...grpc.CallOption) (*KycProfileResponse, error)
}

type ontologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOntologyServiceClient(cc grpc.ClientConnInterface) OntologyServiceClient {
	return &ontologyServiceClient{cc}
}

func (c *ontologyServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, OntologyService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*EntityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityList)
	err := c.cc.Invoke(ctx, OntologyService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, OntologyService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, OntologyService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) SearchEntities(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*EntityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityList)
	err := c.cc.Invoke(ctx, OntologyService_SearchEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetCbu(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*Cbu, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cbu)
	err := c.cc.Invoke(ctx, OntologyService_GetCbu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListCbus(ctx context.Context, in *ListCbusRequest, opts ...grpc.CallOption) (*CbuList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuList)
	err := c.cc.Invoke(ctx, OntologyService_ListCbus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) CreateCbu(ctx context.Context, in *CreateCbuRequest, opts ...grpc.CallOption) (*CbuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuResponse)
	err := c.cc.Invoke(ctx, OntologyService_CreateCbu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetCbuRoles(ctx context.Context, in *GetCbuRolesRequest, opts ...grpc.CallOption) (*CbuRoleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuRoleList)
	err := c.cc.Invoke(ctx, OntologyService_GetCbuRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) AssignCbuRole(ctx context.Context, in *AssignCbuRoleRequest, opts ...grpc.CallOption) (*CbuRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuRoleResponse)
	err := c.cc.Invoke(ctx, OntologyService_AssignCbuRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attribute)
	err := c.cc.Invoke(ctx, OntologyService_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*AttributeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeList)
	err := c.cc.Invoke(ctx, OntologyService_ListAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) SearchAttributes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*AttributeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeList)
	err := c.cc.Invoke(ctx, OntologyService_SearchAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*Concept, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Concept)
	err := c.cc.Invoke(ctx, OntologyService_GetConcept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*ConceptList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptList)
	err := c.cc.Invoke(ctx, OntologyService_ListConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) SearchConcepts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConceptList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptList)
	err := c.cc.Invoke(ctx, OntologyService_SearchConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetRegulation(ctx context.Context, in *GetRegulationRequest, opts ...grpc.CallOption) (*Regulation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Regulation)
	err := c.cc.Invoke(ctx, OntologyService_GetRegulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListRegulations(ctx context.Context, in *ListRegulationsRequest, opts ...grpc.CallOption) (*RegulationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegulationList)
	err := c.cc.Invoke(ctx, OntologyService_ListRegulations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, OntologyService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*DocumentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentList)
	err := c.cc.Invoke(ctx, OntologyService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetEntityControlGraph(ctx context.Context, in *GetEntityControlRequest, opts ...grpc.CallOption) (*EntityControlGraph, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityControlGraph)
	err := c.cc.Invoke(ctx, OntologyService_GetEntityControlGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) CreateControl(ctx context.Context, in *CreateControlRequest, opts ...grpc.CallOption) (*ControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, OntologyService_CreateControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetControlChain(ctx context.Context, in *GetControlChainRequest, opts ...grpc.CallOption) (*ControlChain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlChain)
	err := c.cc.Invoke(ctx, OntologyService_GetControlChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) GetKycProfile(ctx context.Context, in *GetKycProfileRequest, opts ...grpc.CallOption) (*KycProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KycProfile)
	err := c.cc.Invoke(ctx, OntologyService_GetKycProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ontologyServiceClient) UpdateKycProfile(ctx context.Context, in *UpdateKycProfileRequest, opts ...grpc.CallOption) (*KycProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KycProfileResponse)
	err := c.cc.Invoke(ctx, OntologyService_UpdateKycProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OntologyServiceServer is the server API for OntologyService service.
// All implementations must embed UnimplementedOntologyServiceServer
// for forward compatibility.
//
// ============================================================================
// OntologyService: Unified service for entities, CBUs, dictionary, and graphs
// ============================================================================
type OntologyServiceServer interface {
	// Entity operations
	GetEntity(context.Context, *GetEntityRequest) (*Entity, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*EntityList, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error)
	SearchEntities(context.Context, *SearchRequest) (*EntityList, error)
	// CBU operations
	GetCbu(context.Context, *GetCbuRequest) (*Cbu, error)
	ListCbus(context.Context, *ListCbusRequest) (*CbuList, error)
	CreateCbu(context.Context, *CreateCbuRequest) (*CbuResponse, error)
	GetCbuRoles(context.Context, *GetCbuRolesRequest) (*CbuRoleList, error)
	AssignCbuRole(context.Context, *AssignCbuRoleRequest) (*CbuRoleResponse, error)
	// Attribute operations
	GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error)
	ListAttributes(context.Context, *ListAttributesRequest) (*AttributeList, error)
	SearchAttributes(context.Context, *SearchRequest) (*AttributeList, error)
	// Concept operations
	GetConcept(context.Context, *GetConceptRequest) (*Concept, error)
	ListConcepts(context.Context, *ListConceptsRequest) (*ConceptList, error)
	SearchConcepts(context.Context, *SearchRequest) (*ConceptList, error)
	// Regulation & Document operations
	GetRegulation(context.Context, *GetRegulationRequest) (*Regulation, error)
	ListRegulations(context.Context, *ListRegulationsRequest) (*RegulationList, error)
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*DocumentList, error)
	// Control graph operations
	GetEntityControlGraph(context.Context, *GetEntityControlRequest) (*EntityControlGraph, error)
	CreateControl(context.Context, *CreateControlRequest) (*ControlResponse, error)
	GetControlChain(context.Context, *GetControlChainRequest) (*ControlChain, error)
	// KYC Profile operations
	GetKycProfile(context.Context, *GetKycProfileRequest) (*KycProfile, error)
	UpdateKycProfile(context.Context, *UpdateKycProfileRequest) (*KycProfileResponse, error)
	mustEmbedUnimplementedOntologyServiceServer()
}

// UnimplementedOntologyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOntologyServiceServer struct{}

func (UnimplementedOntologyServiceServer) GetEntity(context.Context, *GetEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedOntologyServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*EntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedOntologyServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedOntologyServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedOntologyServiceServer) SearchEntities(context.Context, *SearchRequest) (*EntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEntities not implemented")
}
func (UnimplementedOntologyServiceServer) GetCbu(context.Context, *GetCbuRequest) (*Cbu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbu not implemented")
}
func (UnimplementedOntologyServiceServer) ListCbus(context.Context, *ListCbusRequest) (*CbuList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCbus not implemented")
}
func (UnimplementedOntologyServiceServer) CreateCbu(context.Context, *CreateCbuRequest) (*CbuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCbu not implemented")
}
func (UnimplementedOntologyServiceServer) GetCbuRoles(context.Context, *GetCbuRolesRequest) (*CbuRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbuRoles not implemented")
}
func (UnimplementedOntologyServiceServer) AssignCbuRole(context.Context, *AssignCbuRoleRequest) (*CbuRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCbuRole not implemented")
}
func (UnimplementedOntologyServiceServer) GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedOntologyServiceServer) ListAttributes(context.Context, *ListAttributesRequest) (*AttributeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributes not implemented")
}
func (UnimplementedOntologyServiceServer) SearchAttributes(context.Context, *SearchRequest) (*AttributeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttributes not implemented")
}
func (UnimplementedOntologyServiceServer) GetConcept(context.Context, *GetConceptRequest) (*Concept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcept not implemented")
}
func (UnimplementedOntologyServiceServer) ListConcepts(context.Context, *ListConceptsRequest) (*ConceptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConcepts not implemented")
}
func (UnimplementedOntologyServiceServer) SearchConcepts(context.Context, *SearchRequest) (*ConceptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConcepts not implemented")
}
func (UnimplementedOntologyServiceServer) GetRegulation(context.Context, *GetRegulationRequest) (*Regulation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegulation not implemented")
}
func (UnimplementedOntologyServiceServer) ListRegulations(context.Context, *ListRegulationsRequest) (*RegulationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegulations not implemented")
}
func (UnimplementedOntologyServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedOntologyServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*DocumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedOntologyServiceServer) GetEntityControlGraph(context.Context, *GetEntityControlRequest) (*EntityControlGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityControlGraph not implemented")
}
func (UnimplementedOntologyServiceServer) CreateControl(context.Context, *CreateControlRequest) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateControl not implemented")
}
func (UnimplementedOntologyServiceServer) GetControlChain(context.Context, *GetControlChainRequest) (*ControlChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlChain not implemented")
}
func (UnimplementedOntologyServiceServer) GetKycProfile(context.Context, *GetKycProfileRequest) (*KycProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycProfile not implemented")
}
func (UnimplementedOntologyServiceServer) UpdateKycProfile(context.Context, *UpdateKycProfileRequest) (*KycProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycProfile not implemented")
}
func (UnimplementedOntologyServiceServer) mustEmbedUnimplementedOntologyServiceServer() {}
func (UnimplementedOntologyServiceServer) testEmbeddedByValue()                         {}

// UnsafeOntologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OntologyServiceServer will
// result in compilation errors.
type UnsafeOntologyServiceServer interface {
	mustEmbedUnimplementedOntologyServiceServer()
}

func RegisterOntologyServiceServer(s grpc.ServiceRegistrar, srv OntologyServiceServer) {
	// If the following call pancis, it indicates UnimplementedOntologyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OntologyService_ServiceDesc, srv)
}

func _OntologyService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_SearchEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).SearchEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_SearchEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).SearchEntities(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetCbu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCbuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetCbu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetCbu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetCbu(ctx, req.(*GetCbuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListCbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListCbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListCbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListCbus(ctx, req.(*ListCbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_CreateCbu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCbuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).CreateCbu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_CreateCbu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).CreateCbu(ctx, req.(*CreateCbuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetCbuRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCbuRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetCbuRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetCbuRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetCbuRoles(ctx, req.(*GetCbuRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_AssignCbuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCbuRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).AssignCbuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_AssignCbuRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).AssignCbuRole(ctx, req.(*AssignCbuRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetAttribute(ctx, req.(*GetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListAttributes(ctx, req.(*ListAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_SearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).SearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_SearchAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).SearchAttributes(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetConcept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetConcept(ctx, req.(*GetConceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListConcepts(ctx, req.(*ListConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_SearchConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).SearchConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_SearchConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).SearchConcepts(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetRegulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetRegulation(ctx, req.(*GetRegulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListRegulations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegulationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListRegulations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListRegulations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListRegulations(ctx, req.(*ListRegulationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetEntityControlGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetEntityControlGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetEntityControlGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetEntityControlGraph(ctx, req.(*GetEntityControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_CreateControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).CreateControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_CreateControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).CreateControl(ctx, req.(*CreateControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetControlChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetControlChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetControlChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetControlChain(ctx, req.(*GetControlChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_GetKycProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).GetKycProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_GetKycProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).GetKycProfile(ctx, req.(*GetKycProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OntologyService_UpdateKycProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).UpdateKycProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_UpdateKycProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).UpdateKycProfile(ctx, req.(*UpdateKycProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OntologyService_ServiceDesc is the grpc.ServiceDesc for OntologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OntologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.ontology.OntologyService",
	HandlerType: (*OntologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntity",
			Handler:    _OntologyService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _OntologyService_ListEntities_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _OntologyService_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _OntologyService_UpdateEntity_Handler,
		},
		{
			MethodName: "SearchEntities",
			Handler:    _OntologyService_SearchEntities_Handler,
		},
		{
			MethodName: "GetCbu",
			Handler:    _OntologyService_GetCbu_Handler,
		},
		{
			MethodName: "ListCbus",
			Handler:    _OntologyService_ListCbus_Handler,
		},
		{
			MethodName: "CreateCbu",
			Handler:    _OntologyService_CreateCbu_Handler,
		},
		{
			MethodName: "GetCbuRoles",
			Handler:    _OntologyService_GetCbuRoles_Handler,
		},
		{
			MethodName: "AssignCbuRole",
			Handler:    _OntologyService_AssignCbuRole_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _OntologyService_GetAttribute_Handler,
		},
		{
			MethodName: "ListAttributes",
			Handler:    _OntologyService_ListAttributes_Handler,
		},
		{
			MethodName: "SearchAttributes",
			Handler:    _OntologyService_SearchAttributes_Handler,
		},
		{
			MethodName: "GetConcept",
			Handler:    _OntologyService_GetConcept_Handler,
		},
		{
			MethodName: "ListConcepts",
			Handler:    _OntologyService_ListConcepts_Handler,
		},
		{
			MethodName: "SearchConcepts",
			Handler:    _OntologyService_SearchConcepts_Handler,
		},
		{
			MethodName: "GetRegulation",
			Handler:    _OntologyService_GetRegulation_Handler,
		},
		{
			MethodName: "ListRegulations",
			Handler:    _OntologyService_ListRegulations_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _OntologyService_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _OntologyService_ListDocuments_Handler,
		},
		{
			MethodName: "GetEntityControlGraph",
			Handler:    _OntologyService_GetEntityControlGraph_Handler,
		},
		{
			MethodName: "CreateControl",
			Handler:    _OntologyService_CreateControl_Handler,
		},
		{
			MethodName: "GetControlChain",
			Handler:    _OntologyService_GetControlChain_Handler,
		},
		{
			MethodName: "GetKycProfile",
			Handler:    _OntologyService_GetKycProfile_Handler,
		},
		{
			MethodName: "UpdateKycProfile",
			Handler:    _OntologyService_UpdateKycProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_shared/ontology_service.proto",
}
