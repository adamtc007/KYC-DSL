// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/dsl_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DslService_Execute_FullMethodName        = "/kyc.dsl.DslService/Execute"
	DslService_Validate_FullMethodName       = "/kyc.dsl.DslService/Validate"
	DslService_Parse_FullMethodName          = "/kyc.dsl.DslService/Parse"
	DslService_Serialize_FullMethodName      = "/kyc.dsl.DslService/Serialize"
	DslService_Amend_FullMethodName          = "/kyc.dsl.DslService/Amend"
	DslService_ListAmendments_FullMethodName = "/kyc.dsl.DslService/ListAmendments"
	DslService_GetGrammar_FullMethodName     = "/kyc.dsl.DslService/GetGrammar"
)

// DslServiceClient is the client API for DslService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DslService provides operations for executing and managing DSL cases
type DslServiceClient interface {
	// Execute runs a specific function/amendment on a KYC case
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Validate checks if a DSL case is valid
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidationResult, error)
	// Parse converts DSL text into structured format
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
	// Serialize converts structured case back to DSL
	Serialize(ctx context.Context, in *SerializeRequest, opts ...grpc.CallOption) (*SerializeResponse, error)
	// Amend applies a predefined amendment to a case
	Amend(ctx context.Context, in *AmendRequest, opts ...grpc.CallOption) (*AmendResponse, error)
	// ListAmendments returns available amendment types
	ListAmendments(ctx context.Context, in *ListAmendmentsRequest, opts ...grpc.CallOption) (*ListAmendmentsResponse, error)
	// GetGrammar returns the current DSL grammar definition
	GetGrammar(ctx context.Context, in *GetGrammarRequest, opts ...grpc.CallOption) (*GrammarResponse, error)
}

type dslServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDslServiceClient(cc grpc.ClientConnInterface) DslServiceClient {
	return &dslServiceClient{cc}
}

func (c *dslServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, DslService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResult)
	err := c.cc.Invoke(ctx, DslService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, DslService_Parse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) Serialize(ctx context.Context, in *SerializeRequest, opts ...grpc.CallOption) (*SerializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SerializeResponse)
	err := c.cc.Invoke(ctx, DslService_Serialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) Amend(ctx context.Context, in *AmendRequest, opts ...grpc.CallOption) (*AmendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendResponse)
	err := c.cc.Invoke(ctx, DslService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) ListAmendments(ctx context.Context, in *ListAmendmentsRequest, opts ...grpc.CallOption) (*ListAmendmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAmendmentsResponse)
	err := c.cc.Invoke(ctx, DslService_ListAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dslServiceClient) GetGrammar(ctx context.Context, in *GetGrammarRequest, opts ...grpc.CallOption) (*GrammarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrammarResponse)
	err := c.cc.Invoke(ctx, DslService_GetGrammar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DslServiceServer is the server API for DslService service.
// All implementations must embed UnimplementedDslServiceServer
// for forward compatibility.
//
// DslService provides operations for executing and managing DSL cases
type DslServiceServer interface {
	// Execute runs a specific function/amendment on a KYC case
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Validate checks if a DSL case is valid
	Validate(context.Context, *ValidateRequest) (*ValidationResult, error)
	// Parse converts DSL text into structured format
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
	// Serialize converts structured case back to DSL
	Serialize(context.Context, *SerializeRequest) (*SerializeResponse, error)
	// Amend applies a predefined amendment to a case
	Amend(context.Context, *AmendRequest) (*AmendResponse, error)
	// ListAmendments returns available amendment types
	ListAmendments(context.Context, *ListAmendmentsRequest) (*ListAmendmentsResponse, error)
	// GetGrammar returns the current DSL grammar definition
	GetGrammar(context.Context, *GetGrammarRequest) (*GrammarResponse, error)
	mustEmbedUnimplementedDslServiceServer()
}

// UnimplementedDslServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDslServiceServer struct{}

func (UnimplementedDslServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDslServiceServer) Validate(context.Context, *ValidateRequest) (*ValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedDslServiceServer) Parse(context.Context, *ParseRequest) (*ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedDslServiceServer) Serialize(context.Context, *SerializeRequest) (*SerializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Serialize not implemented")
}
func (UnimplementedDslServiceServer) Amend(context.Context, *AmendRequest) (*AmendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Amend not implemented")
}
func (UnimplementedDslServiceServer) ListAmendments(context.Context, *ListAmendmentsRequest) (*ListAmendmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAmendments not implemented")
}
func (UnimplementedDslServiceServer) GetGrammar(context.Context, *GetGrammarRequest) (*GrammarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrammar not implemented")
}
func (UnimplementedDslServiceServer) mustEmbedUnimplementedDslServiceServer() {}
func (UnimplementedDslServiceServer) testEmbeddedByValue()                    {}

// UnsafeDslServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DslServiceServer will
// result in compilation errors.
type UnsafeDslServiceServer interface {
	mustEmbedUnimplementedDslServiceServer()
}

func RegisterDslServiceServer(s grpc.ServiceRegistrar, srv DslServiceServer) {
	// If the following call pancis, it indicates UnimplementedDslServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DslService_ServiceDesc, srv)
}

func _DslService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_Serialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).Serialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_Serialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).Serialize(ctx, req.(*SerializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_Amend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).Amend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_Amend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).Amend(ctx, req.(*AmendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_ListAmendments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAmendmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).ListAmendments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_ListAmendments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).ListAmendments(ctx, req.(*ListAmendmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DslService_GetGrammar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrammarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DslServiceServer).GetGrammar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DslService_GetGrammar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DslServiceServer).GetGrammar(ctx, req.(*GetGrammarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DslService_ServiceDesc is the grpc.ServiceDesc for DslService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DslService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.dsl.DslService",
	HandlerType: (*DslServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _DslService_Execute_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _DslService_Validate_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _DslService_Parse_Handler,
		},
		{
			MethodName: "Serialize",
			Handler:    _DslService_Serialize_Handler,
		},
		{
			MethodName: "Amend",
			Handler:    _DslService_Amend_Handler,
		},
		{
			MethodName: "ListAmendments",
			Handler:    _DslService_ListAmendments_Handler,
		},
		{
			MethodName: "GetGrammar",
			Handler:    _DslService_GetGrammar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/dsl_service.proto",
}
