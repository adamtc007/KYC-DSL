// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/docmaster_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocMasterService_AddDocument_FullMethodName              = "/kyc.docmaster.DocMasterService/AddDocument"
	DocMasterService_GetDocument_FullMethodName              = "/kyc.docmaster.DocMasterService/GetDocument"
	DocMasterService_ListDocuments_FullMethodName            = "/kyc.docmaster.DocMasterService/ListDocuments"
	DocMasterService_FindDocumentsByAttribute_FullMethodName = "/kyc.docmaster.DocMasterService/FindDocumentsByAttribute"
)

// DocMasterServiceClient is the client API for DocMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DocMasterService manages the master catalog of identity documents
type DocMasterServiceClient interface {
	// Add a new document type to the catalog
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// Get a specific document by ID
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// List documents with optional filters
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// Find documents that contain a specific attribute
	FindDocumentsByAttribute(ctx context.Context, in *FindDocumentsByAttributeRequest, opts ...grpc.CallOption) (*FindDocumentsByAttributeResponse, error)
}

type docMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocMasterServiceClient(cc grpc.ClientConnInterface) DocMasterServiceClient {
	return &docMasterServiceClient{cc}
}

func (c *docMasterServiceClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, DocMasterService_AddDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docMasterServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, DocMasterService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docMasterServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, DocMasterService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docMasterServiceClient) FindDocumentsByAttribute(ctx context.Context, in *FindDocumentsByAttributeRequest, opts ...grpc.CallOption) (*FindDocumentsByAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDocumentsByAttributeResponse)
	err := c.cc.Invoke(ctx, DocMasterService_FindDocumentsByAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocMasterServiceServer is the server API for DocMasterService service.
// All implementations must embed UnimplementedDocMasterServiceServer
// for forward compatibility.
//
// DocMasterService manages the master catalog of identity documents
type DocMasterServiceServer interface {
	// Add a new document type to the catalog
	AddDocument(context.Context, *AddDocumentRequest) (*Document, error)
	// Get a specific document by ID
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	// List documents with optional filters
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// Find documents that contain a specific attribute
	FindDocumentsByAttribute(context.Context, *FindDocumentsByAttributeRequest) (*FindDocumentsByAttributeResponse, error)
	mustEmbedUnimplementedDocMasterServiceServer()
}

// UnimplementedDocMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocMasterServiceServer struct{}

func (UnimplementedDocMasterServiceServer) AddDocument(context.Context, *AddDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (UnimplementedDocMasterServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocMasterServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocMasterServiceServer) FindDocumentsByAttribute(context.Context, *FindDocumentsByAttributeRequest) (*FindDocumentsByAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocumentsByAttribute not implemented")
}
func (UnimplementedDocMasterServiceServer) mustEmbedUnimplementedDocMasterServiceServer() {}
func (UnimplementedDocMasterServiceServer) testEmbeddedByValue()                          {}

// UnsafeDocMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocMasterServiceServer will
// result in compilation errors.
type UnsafeDocMasterServiceServer interface {
	mustEmbedUnimplementedDocMasterServiceServer()
}

func RegisterDocMasterServiceServer(s grpc.ServiceRegistrar, srv DocMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocMasterService_ServiceDesc, srv)
}

func _DocMasterService_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocMasterServiceServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocMasterService_AddDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocMasterServiceServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocMasterService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocMasterServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocMasterService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocMasterServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocMasterService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocMasterServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocMasterService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocMasterServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocMasterService_FindDocumentsByAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentsByAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocMasterServiceServer).FindDocumentsByAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocMasterService_FindDocumentsByAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocMasterServiceServer).FindDocumentsByAttribute(ctx, req.(*FindDocumentsByAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocMasterService_ServiceDesc is the grpc.ServiceDesc for DocMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.docmaster.DocMasterService",
	HandlerType: (*DocMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDocument",
			Handler:    _DocMasterService_AddDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocMasterService_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DocMasterService_ListDocuments_Handler,
		},
		{
			MethodName: "FindDocumentsByAttribute",
			Handler:    _DocMasterService_FindDocumentsByAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/docmaster_service.proto",
}
