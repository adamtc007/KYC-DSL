// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/rag_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RagService_AttributeSearch_FullMethodName         = "/kyc.rag.RagService/AttributeSearch"
	RagService_SimilarAttributes_FullMethodName       = "/kyc.rag.RagService/SimilarAttributes"
	RagService_TextSearch_FullMethodName              = "/kyc.rag.RagService/TextSearch"
	RagService_GetAttribute_FullMethodName            = "/kyc.rag.RagService/GetAttribute"
	RagService_SubmitFeedback_FullMethodName          = "/kyc.rag.RagService/SubmitFeedback"
	RagService_GetRecentFeedback_FullMethodName       = "/kyc.rag.RagService/GetRecentFeedback"
	RagService_GetFeedbackAnalytics_FullMethodName    = "/kyc.rag.RagService/GetFeedbackAnalytics"
	RagService_GetMetadataStats_FullMethodName        = "/kyc.rag.RagService/GetMetadataStats"
	RagService_EnrichedAttributeSearch_FullMethodName = "/kyc.rag.RagService/EnrichedAttributeSearch"
	RagService_HealthCheck_FullMethodName             = "/kyc.rag.RagService/HealthCheck"
)

// RagServiceClient is the client API for RagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RagService provides RAG (Retrieval-Augmented Generation) operations
// for semantic search and feedback on regulatory attributes
type RagServiceClient interface {
	// AttributeSearch performs semantic vector search on attributes
	AttributeSearch(ctx context.Context, in *RagSearchRequest, opts ...grpc.CallOption) (*RagSearchResponse, error)
	// SimilarAttributes finds attributes similar to a given attribute
	SimilarAttributes(ctx context.Context, in *SimilarAttributesRequest, opts ...grpc.CallOption) (*RagSearchResponse, error)
	// TextSearch performs traditional text-based search
	TextSearch(ctx context.Context, in *TextSearchRequest, opts ...grpc.CallOption) (*RagSearchResponse, error)
	// GetAttribute retrieves complete metadata for a specific attribute
	GetAttribute(ctx context.Context, in *RagGetAttributeRequest, opts ...grpc.CallOption) (*AttributeMetadata, error)
	// SubmitFeedback submits user or AI agent feedback on search results
	SubmitFeedback(ctx context.Context, in *RagFeedbackRequest, opts ...grpc.CallOption) (*RagFeedbackResponse, error)
	// GetRecentFeedback retrieves recent feedback entries
	GetRecentFeedback(ctx context.Context, in *GetRecentFeedbackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RagFeedback], error)
	// GetFeedbackAnalytics retrieves comprehensive feedback analytics
	GetFeedbackAnalytics(ctx context.Context, in *GetFeedbackAnalyticsRequest, opts ...grpc.CallOption) (*FeedbackAnalytics, error)
	// GetMetadataStats retrieves repository statistics
	GetMetadataStats(ctx context.Context, in *GetMetadataStatsRequest, opts ...grpc.CallOption) (*MetadataStats, error)
	// EnrichedAttributeSearch performs search with full context (docs + regulations)
	EnrichedAttributeSearch(ctx context.Context, in *RagSearchRequest, opts ...grpc.CallOption) (*EnrichedSearchResponse, error)
	// HealthCheck verifies RAG system health
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type ragServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRagServiceClient(cc grpc.ClientConnInterface) RagServiceClient {
	return &ragServiceClient{cc}
}

func (c *ragServiceClient) AttributeSearch(ctx context.Context, in *RagSearchRequest, opts ...grpc.CallOption) (*RagSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RagSearchResponse)
	err := c.cc.Invoke(ctx, RagService_AttributeSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) SimilarAttributes(ctx context.Context, in *SimilarAttributesRequest, opts ...grpc.CallOption) (*RagSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RagSearchResponse)
	err := c.cc.Invoke(ctx, RagService_SimilarAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) TextSearch(ctx context.Context, in *TextSearchRequest, opts ...grpc.CallOption) (*RagSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RagSearchResponse)
	err := c.cc.Invoke(ctx, RagService_TextSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) GetAttribute(ctx context.Context, in *RagGetAttributeRequest, opts ...grpc.CallOption) (*AttributeMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeMetadata)
	err := c.cc.Invoke(ctx, RagService_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) SubmitFeedback(ctx context.Context, in *RagFeedbackRequest, opts ...grpc.CallOption) (*RagFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RagFeedbackResponse)
	err := c.cc.Invoke(ctx, RagService_SubmitFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) GetRecentFeedback(ctx context.Context, in *GetRecentFeedbackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RagFeedback], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RagService_ServiceDesc.Streams[0], RagService_GetRecentFeedback_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRecentFeedbackRequest, RagFeedback]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RagService_GetRecentFeedbackClient = grpc.ServerStreamingClient[RagFeedback]

func (c *ragServiceClient) GetFeedbackAnalytics(ctx context.Context, in *GetFeedbackAnalyticsRequest, opts ...grpc.CallOption) (*FeedbackAnalytics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackAnalytics)
	err := c.cc.Invoke(ctx, RagService_GetFeedbackAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) GetMetadataStats(ctx context.Context, in *GetMetadataStatsRequest, opts ...grpc.CallOption) (*MetadataStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataStats)
	err := c.cc.Invoke(ctx, RagService_GetMetadataStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) EnrichedAttributeSearch(ctx context.Context, in *RagSearchRequest, opts ...grpc.CallOption) (*EnrichedSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrichedSearchResponse)
	err := c.cc.Invoke(ctx, RagService_EnrichedAttributeSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RagService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RagServiceServer is the server API for RagService service.
// All implementations must embed UnimplementedRagServiceServer
// for forward compatibility.
//
// RagService provides RAG (Retrieval-Augmented Generation) operations
// for semantic search and feedback on regulatory attributes
type RagServiceServer interface {
	// AttributeSearch performs semantic vector search on attributes
	AttributeSearch(context.Context, *RagSearchRequest) (*RagSearchResponse, error)
	// SimilarAttributes finds attributes similar to a given attribute
	SimilarAttributes(context.Context, *SimilarAttributesRequest) (*RagSearchResponse, error)
	// TextSearch performs traditional text-based search
	TextSearch(context.Context, *TextSearchRequest) (*RagSearchResponse, error)
	// GetAttribute retrieves complete metadata for a specific attribute
	GetAttribute(context.Context, *RagGetAttributeRequest) (*AttributeMetadata, error)
	// SubmitFeedback submits user or AI agent feedback on search results
	SubmitFeedback(context.Context, *RagFeedbackRequest) (*RagFeedbackResponse, error)
	// GetRecentFeedback retrieves recent feedback entries
	GetRecentFeedback(*GetRecentFeedbackRequest, grpc.ServerStreamingServer[RagFeedback]) error
	// GetFeedbackAnalytics retrieves comprehensive feedback analytics
	GetFeedbackAnalytics(context.Context, *GetFeedbackAnalyticsRequest) (*FeedbackAnalytics, error)
	// GetMetadataStats retrieves repository statistics
	GetMetadataStats(context.Context, *GetMetadataStatsRequest) (*MetadataStats, error)
	// EnrichedAttributeSearch performs search with full context (docs + regulations)
	EnrichedAttributeSearch(context.Context, *RagSearchRequest) (*EnrichedSearchResponse, error)
	// HealthCheck verifies RAG system health
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRagServiceServer()
}

// UnimplementedRagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRagServiceServer struct{}

func (UnimplementedRagServiceServer) AttributeSearch(context.Context, *RagSearchRequest) (*RagSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeSearch not implemented")
}
func (UnimplementedRagServiceServer) SimilarAttributes(context.Context, *SimilarAttributesRequest) (*RagSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimilarAttributes not implemented")
}
func (UnimplementedRagServiceServer) TextSearch(context.Context, *TextSearchRequest) (*RagSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextSearch not implemented")
}
func (UnimplementedRagServiceServer) GetAttribute(context.Context, *RagGetAttributeRequest) (*AttributeMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedRagServiceServer) SubmitFeedback(context.Context, *RagFeedbackRequest) (*RagFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedback not implemented")
}
func (UnimplementedRagServiceServer) GetRecentFeedback(*GetRecentFeedbackRequest, grpc.ServerStreamingServer[RagFeedback]) error {
	return status.Errorf(codes.Unimplemented, "method GetRecentFeedback not implemented")
}
func (UnimplementedRagServiceServer) GetFeedbackAnalytics(context.Context, *GetFeedbackAnalyticsRequest) (*FeedbackAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackAnalytics not implemented")
}
func (UnimplementedRagServiceServer) GetMetadataStats(context.Context, *GetMetadataStatsRequest) (*MetadataStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataStats not implemented")
}
func (UnimplementedRagServiceServer) EnrichedAttributeSearch(context.Context, *RagSearchRequest) (*EnrichedSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichedAttributeSearch not implemented")
}
func (UnimplementedRagServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRagServiceServer) mustEmbedUnimplementedRagServiceServer() {}
func (UnimplementedRagServiceServer) testEmbeddedByValue()                    {}

// UnsafeRagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RagServiceServer will
// result in compilation errors.
type UnsafeRagServiceServer interface {
	mustEmbedUnimplementedRagServiceServer()
}

func RegisterRagServiceServer(s grpc.ServiceRegistrar, srv RagServiceServer) {
	// If the following call pancis, it indicates UnimplementedRagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RagService_ServiceDesc, srv)
}

func _RagService_AttributeSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).AttributeSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_AttributeSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).AttributeSearch(ctx, req.(*RagSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_SimilarAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).SimilarAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_SimilarAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).SimilarAttributes(ctx, req.(*SimilarAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_TextSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).TextSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_TextSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).TextSearch(ctx, req.(*TextSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagGetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).GetAttribute(ctx, req.(*RagGetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_SubmitFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).SubmitFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_SubmitFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).SubmitFeedback(ctx, req.(*RagFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_GetRecentFeedback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecentFeedbackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RagServiceServer).GetRecentFeedback(m, &grpc.GenericServerStream[GetRecentFeedbackRequest, RagFeedback]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RagService_GetRecentFeedbackServer = grpc.ServerStreamingServer[RagFeedback]

func _RagService_GetFeedbackAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).GetFeedbackAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_GetFeedbackAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).GetFeedbackAnalytics(ctx, req.(*GetFeedbackAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_GetMetadataStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).GetMetadataStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_GetMetadataStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).GetMetadataStats(ctx, req.(*GetMetadataStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_EnrichedAttributeSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).EnrichedAttributeSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_EnrichedAttributeSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).EnrichedAttributeSearch(ctx, req.(*RagSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RagService_ServiceDesc is the grpc.ServiceDesc for RagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.rag.RagService",
	HandlerType: (*RagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttributeSearch",
			Handler:    _RagService_AttributeSearch_Handler,
		},
		{
			MethodName: "SimilarAttributes",
			Handler:    _RagService_SimilarAttributes_Handler,
		},
		{
			MethodName: "TextSearch",
			Handler:    _RagService_TextSearch_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _RagService_GetAttribute_Handler,
		},
		{
			MethodName: "SubmitFeedback",
			Handler:    _RagService_SubmitFeedback_Handler,
		},
		{
			MethodName: "GetFeedbackAnalytics",
			Handler:    _RagService_GetFeedbackAnalytics_Handler,
		},
		{
			MethodName: "GetMetadataStats",
			Handler:    _RagService_GetMetadataStats_Handler,
		},
		{
			MethodName: "EnrichedAttributeSearch",
			Handler:    _RagService_EnrichedAttributeSearch_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RagService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRecentFeedback",
			Handler:       _RagService_GetRecentFeedback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/rag_service.proto",
}
