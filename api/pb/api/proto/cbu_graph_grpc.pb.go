// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/cbu_graph.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CbuGraphService_GetGraph_FullMethodName         = "/kyc.cbu.CbuGraphService/GetGraph"
	CbuGraphService_GetEntity_FullMethodName        = "/kyc.cbu.CbuGraphService/GetEntity"
	CbuGraphService_ListEntities_FullMethodName     = "/kyc.cbu.CbuGraphService/ListEntities"
	CbuGraphService_GetRelationships_FullMethodName = "/kyc.cbu.CbuGraphService/GetRelationships"
	CbuGraphService_ValidateGraph_FullMethodName    = "/kyc.cbu.CbuGraphService/ValidateGraph"
	CbuGraphService_GetControlChain_FullMethodName  = "/kyc.cbu.CbuGraphService/GetControlChain"
)

// CbuGraphServiceClient is the client API for CbuGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CbuGraphService provides operations for retrieving and managing CBU organizational graphs
type CbuGraphServiceClient interface {
	// GetGraph retrieves the complete organizational graph for a CBU
	GetGraph(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*CbuGraph, error)
	// GetEntity retrieves a single entity by ID
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*CbuEntity, error)
	// ListEntities streams all entities in a CBU
	ListEntities(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CbuEntity], error)
	// GetRelationships retrieves relationships for a specific entity
	GetRelationships(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*RelationshipResponse, error)
	// ValidateGraph validates the graph structure and control percentages
	ValidateGraph(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
	// GetControlChain traces the control chain from root to a specific entity
	GetControlChain(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*ControlChainResponse, error)
}

type cbuGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCbuGraphServiceClient(cc grpc.ClientConnInterface) CbuGraphServiceClient {
	return &cbuGraphServiceClient{cc}
}

func (c *cbuGraphServiceClient) GetGraph(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*CbuGraph, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuGraph)
	err := c.cc.Invoke(ctx, CbuGraphService_GetGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cbuGraphServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*CbuEntity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CbuEntity)
	err := c.cc.Invoke(ctx, CbuGraphService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cbuGraphServiceClient) ListEntities(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CbuEntity], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CbuGraphService_ServiceDesc.Streams[0], CbuGraphService_ListEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCbuRequest, CbuEntity]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CbuGraphService_ListEntitiesClient = grpc.ServerStreamingClient[CbuEntity]

func (c *cbuGraphServiceClient) GetRelationships(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*RelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationshipResponse)
	err := c.cc.Invoke(ctx, CbuGraphService_GetRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cbuGraphServiceClient) ValidateGraph(ctx context.Context, in *GetCbuRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, CbuGraphService_ValidateGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cbuGraphServiceClient) GetControlChain(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*ControlChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlChainResponse)
	err := c.cc.Invoke(ctx, CbuGraphService_GetControlChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CbuGraphServiceServer is the server API for CbuGraphService service.
// All implementations must embed UnimplementedCbuGraphServiceServer
// for forward compatibility.
//
// CbuGraphService provides operations for retrieving and managing CBU organizational graphs
type CbuGraphServiceServer interface {
	// GetGraph retrieves the complete organizational graph for a CBU
	GetGraph(context.Context, *GetCbuRequest) (*CbuGraph, error)
	// GetEntity retrieves a single entity by ID
	GetEntity(context.Context, *GetEntityRequest) (*CbuEntity, error)
	// ListEntities streams all entities in a CBU
	ListEntities(*GetCbuRequest, grpc.ServerStreamingServer[CbuEntity]) error
	// GetRelationships retrieves relationships for a specific entity
	GetRelationships(context.Context, *GetEntityRequest) (*RelationshipResponse, error)
	// ValidateGraph validates the graph structure and control percentages
	ValidateGraph(context.Context, *GetCbuRequest) (*ValidationResponse, error)
	// GetControlChain traces the control chain from root to a specific entity
	GetControlChain(context.Context, *GetEntityRequest) (*ControlChainResponse, error)
	mustEmbedUnimplementedCbuGraphServiceServer()
}

// UnimplementedCbuGraphServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCbuGraphServiceServer struct{}

func (UnimplementedCbuGraphServiceServer) GetGraph(context.Context, *GetCbuRequest) (*CbuGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedCbuGraphServiceServer) GetEntity(context.Context, *GetEntityRequest) (*CbuEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedCbuGraphServiceServer) ListEntities(*GetCbuRequest, grpc.ServerStreamingServer[CbuEntity]) error {
	return status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedCbuGraphServiceServer) GetRelationships(context.Context, *GetEntityRequest) (*RelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationships not implemented")
}
func (UnimplementedCbuGraphServiceServer) ValidateGraph(context.Context, *GetCbuRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateGraph not implemented")
}
func (UnimplementedCbuGraphServiceServer) GetControlChain(context.Context, *GetEntityRequest) (*ControlChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlChain not implemented")
}
func (UnimplementedCbuGraphServiceServer) mustEmbedUnimplementedCbuGraphServiceServer() {}
func (UnimplementedCbuGraphServiceServer) testEmbeddedByValue()                         {}

// UnsafeCbuGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CbuGraphServiceServer will
// result in compilation errors.
type UnsafeCbuGraphServiceServer interface {
	mustEmbedUnimplementedCbuGraphServiceServer()
}

func RegisterCbuGraphServiceServer(s grpc.ServiceRegistrar, srv CbuGraphServiceServer) {
	// If the following call pancis, it indicates UnimplementedCbuGraphServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CbuGraphService_ServiceDesc, srv)
}

func _CbuGraphService_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCbuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CbuGraphServiceServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CbuGraphService_GetGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CbuGraphServiceServer).GetGraph(ctx, req.(*GetCbuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CbuGraphService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CbuGraphServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CbuGraphService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CbuGraphServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CbuGraphService_ListEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCbuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CbuGraphServiceServer).ListEntities(m, &grpc.GenericServerStream[GetCbuRequest, CbuEntity]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CbuGraphService_ListEntitiesServer = grpc.ServerStreamingServer[CbuEntity]

func _CbuGraphService_GetRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CbuGraphServiceServer).GetRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CbuGraphService_GetRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CbuGraphServiceServer).GetRelationships(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CbuGraphService_ValidateGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCbuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CbuGraphServiceServer).ValidateGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CbuGraphService_ValidateGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CbuGraphServiceServer).ValidateGraph(ctx, req.(*GetCbuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CbuGraphService_GetControlChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CbuGraphServiceServer).GetControlChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CbuGraphService_GetControlChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CbuGraphServiceServer).GetControlChain(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CbuGraphService_ServiceDesc is the grpc.ServiceDesc for CbuGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CbuGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.cbu.CbuGraphService",
	HandlerType: (*CbuGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGraph",
			Handler:    _CbuGraphService_GetGraph_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _CbuGraphService_GetEntity_Handler,
		},
		{
			MethodName: "GetRelationships",
			Handler:    _CbuGraphService_GetRelationships_Handler,
		},
		{
			MethodName: "ValidateGraph",
			Handler:    _CbuGraphService_ValidateGraph_Handler,
		},
		{
			MethodName: "GetControlChain",
			Handler:    _CbuGraphService_GetControlChain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEntities",
			Handler:       _CbuGraphService_ListEntities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/cbu_graph.proto",
}
